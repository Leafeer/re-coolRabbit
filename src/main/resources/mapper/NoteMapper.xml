<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.coolrabbit.dao.NoteMapper">
  <resultMap id="BaseResultMap" type="com.example.coolrabbit.entity.Note">
    <id column="note_id" jdbcType="INTEGER" property="noteId" />
    <result column="note_title" jdbcType="VARCHAR" property="noteTitle" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="note_content" jdbcType="VARCHAR" property="noteContent" />
    <result column="is_private" jdbcType="INTEGER" property="isPrivate" />
    <result column="folder_id" jdbcType="INTEGER" property="folderId" />
  </resultMap>
  <sql id="Base_Column_List">
    note_id, note_title, user_id, note_content, is_private, folder_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from note
    where note_id = #{noteId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from note
    where note_id = #{noteId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.coolrabbit.entity.Note">
    insert into note (note_id, note_title, user_id, 
      note_content, is_private, folder_id
      )
    values (#{noteId,jdbcType=INTEGER}, #{noteTitle,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{noteContent,jdbcType=VARCHAR}, #{isPrivate,jdbcType=INTEGER}, #{folderId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.coolrabbit.entity.Note">
    insert into note
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="noteId != null">
        note_id,
      </if>
      <if test="noteTitle != null">
        note_title,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="noteContent != null">
        note_content,
      </if>
      <if test="isPrivate != null">
        is_private,
      </if>
      <if test="folderId != null">
        folder_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="noteId != null">
        #{noteId,jdbcType=INTEGER},
      </if>
      <if test="noteTitle != null">
        #{noteTitle,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="noteContent != null">
        #{noteContent,jdbcType=VARCHAR},
      </if>
      <if test="isPrivate != null">
        #{isPrivate,jdbcType=INTEGER},
      </if>
      <if test="folderId != null">
        #{folderId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.coolrabbit.entity.Note">
    update note
    <set>
      <if test="noteTitle != null">
        note_title = #{noteTitle,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="noteContent != null">
        note_content = #{noteContent,jdbcType=VARCHAR},
      </if>
      <if test="isPrivate != null">
        is_private = #{isPrivate,jdbcType=INTEGER},
      </if>
      <if test="folderId != null">
        folder_id = #{folderId,jdbcType=INTEGER},
      </if>
    </set>
    where note_id = #{noteId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.coolrabbit.entity.Note">
    update note
    set note_title = #{noteTitle,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      note_content = #{noteContent,jdbcType=VARCHAR},
      is_private = #{isPrivate,jdbcType=INTEGER},
      folder_id = #{folderId,jdbcType=INTEGER}
    where note_id = #{noteId,jdbcType=INTEGER}
  </update>
</mapper>